# Тестовое задание #

Написать две программы на Node.js; первая будет выступать в роли сервера, вторая - клиента. Взаимодействовать
они будут по [ZeroMQ](http://zeromq.org/). "Клиент" будет отправлять запросы на логин, а "сервер" - в зависимости
от данных в БД отвечать на эти запросы.

## Требования ##

"Сервер" должен:

1. принять следующие аргументы командной строки: `pub`, `sub`
1. подключиться ZeroMQ pub-сокетом по TCP к хосту `127.0.0.1` на порт `pub` (socket.bindSync)
1. подключиться ZeroMQ sub-сокетом по TCP к хосту `127.0.0.1` на порт `sub` (socket.bindSync)
1. подключиться к БД (SQLite)
1. подписаться sub-сокетом на сообщения с первым фреймом `api_in`
1. при получении сообщения по sub-сокету
   1. распарсить джсон, переданный во втором фрейме сообщения
   1. если в джсоне поле `type` равно строке `"login"` 
      1. проверить пароль пользователя, основываясь на данных таблицы `user` (ее формат ниже)
      1. в зависимости от результата проверки отправить сообщение по pub-сокету (его формат ниже)

"Клиент" должен:

1. принять следующие аргументы командной строки: `pub`, `sub`
1. подключиться ZeroMQ pub-сокетом по TCP к хосту `127.0.0.1` на порт `sub` (socket.connect)
1. подключиться ZeroMQ sub-сокетом по TCP к хосту `127.0.0.1` на порт `pub` (socket.connect)
1. подписать sub-сокет на сообщения с первым фреймом `api_out`
1. при получении сообщения по sub-сокету
   1. распарсить джсон, переданный во втором фрейме сообщения
   1. если в джсоне поле `status` равно строке `"ok"` - вывести в консоль `"ok"`
   1. если в джсоне поле `status` равно строке `"error"` - вывести в консоль значение поля `error`
1. запросить у пользователя логин  (через командную строку)
1. запросить у пользователя пароль (через командную строку)
1. отправить через pub-сокет сообщение, у которого первый фрейм `api_in`, второй - json-строка 
   с полями type: 'login', email и pwd - данные от пользователя, msg_id - случайно сгенерированная строка


## Формат входящих сообщений ##

Первый фрейм `api_in`, второй:

```
{
   type: "login",
   email: "foo@bar.baz",
   pwd: "xxx",
   msg_id: "yyy"
}
```

## Формат исходящих сообщений ##

Первый фрейм `api_out`, второй:

```
//успех:
{
   msg_id:  "yyy",  //равно значению входящего сообщения
   user_id: "N",    //айди пользователя из БД
   status:  "ok"
}

//ошибкa
{
   msg_id: "yyy",
   status: "error",
   error:  "xxx"
}
```

Поле error может принимать одно из след. значений:

`WRONG_PWD` - неправильный логин или пароль;
`WRONG_FORMAT` - нет одного из полей или поля пустые.

## Структура таблицы ##

| Столбец | Тип         |
|:--------|:------------|
| user_id | INTEGER     |
| email   | TEXT        |
| passw   | TEXT        |

В столбце `passw` хранится нехешированный пароль.
